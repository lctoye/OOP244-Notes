/* Problem 40 */
	    #include <iostream>
	    using namespace std;

	    class point {
		double x1;
		double y1;
		double z1;
	      public:
		point() { x1 = y1 = z1 = 0; }
		point(double n1, double n2, double n3) 
		  { x1 = n1; y1 = n2; z1 = n3; }
		double x() const { return x1; }
		double y() const { return y1; }
		double z() const { return z1; }
	    };

	    ostream &operator<<(ostream &o, point p)
	    { return o <<'('<<p.x()<<','<<p.y()<<','<<p.z()<<')'; }

	    point operator+(point a, point b)
	    { return point(a.x() + b.x(), a.y() + b.y(), a.z() + b.z()); }

	    point operator*(point a, point b)
	    { return point((a.y()*b.z()) - (b.y()*a.z()), 
			   (a.z()*b.x()) - (a.x()*b.z()),
			   (a.x()*b.y()) - (b.x()*a.y())); }

	    point operator*(double a, point b)
	    { return point(a*b.x(), a*b.y(), a*b.z()); }

	    point operator*(point a, double b) { return b * a; }

	    point operator-(point p) { return point(-p.x(),-p.y(),-p.z()); }

	    point operator-(point a, point b) { return a + (-b); }

	    int main() {
		point one(2, 1, 3), two(1, -4, -2), three(4, 5, 6);
		cout << one << " X " << two << " = " << one * two << '\n';
		one = two + three;
		cout << one << '\n';
		one = one * 5;
		cout << one << '\n';
		one = two - (3 * three);
		cout << one << " and " << three << '\n';
		return 0;
	    }
